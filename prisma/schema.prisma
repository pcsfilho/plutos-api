generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // ou "sqlite" se estiver usando localmente
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  wallets   Wallet[]
  createdAt DateTime @default(now())
}

model Wallet {
  id             Int           @id @default(autoincrement())
  name           String
  currencyId     Int
  userId         Int
  initialBalance Float
  user           User          @relation(fields: [userId], references: [id])
  currency       Currency      @relation(fields: [currencyId], references: [id])
  transactions   Transaction[]
  reminders      Reminder[]
  createdAt DateTime @default(now())
}

model Currency {
  id           Int      @id @default(autoincrement())
  name         String // Ex: Real Brasileiro
  code         String // Ex: BRL
  symbol       String // Ex: R$
  exchangeRate Float // opcional: taxa em relação à moeda base
  wallets      Wallet[]
  createdAt DateTime @default(now())
}

model Transaction {
  id          Int      @id @default(autoincrement())
  walletId    Int
  typeId      Int
  categoryId  Int
  amount      Float
  description String?
  date        DateTime
  isRecurring Boolean  @default(false)
  recurrenceInterval String? // "daily" | "weekly" | "monthly" | "yearly"

  wallet   Wallet          @relation(fields: [walletId], references: [id])
  type     TransactionType @relation(fields: [typeId], references: [id])
  category Category        @relation(fields: [categoryId], references: [id])
  createdAt DateTime @default(now())
}

model Category {
  id           Int             @id @default(autoincrement())
  name         String
  typeId       Int
  type         TransactionType @relation(fields: [typeId], references: [id])
  transactions Transaction[]
  createdAt DateTime @default(now())
}

model TransactionType {
  id           Int           @id @default(autoincrement())
  name         String // "Entrada", "Saída"
  categories   Category[]
  transactions Transaction[]
  createdAt DateTime @default(now())
}

model Reminder {
  id          Int      @id @default(autoincrement())
  walletId    Int
  title       String
  description String?
  dueDate     DateTime
  isPaid      Boolean  @default(false)
  createdAt   DateTime @default(now())

  wallet Wallet @relation(fields: [walletId], references: [id])
}
